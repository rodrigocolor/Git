//-------------------------------------------------------------------------------------------------
//     This code was generated by the Wmi Delphi Code Creator http://theroadtodelphi.wordpress.com
//     Version: 1.9.5.0 
//
//
//
//     LIABILITY DISCLAIMER
//     THIS GENERATED CODE IS DISTRIBUTED "AS IS". NO WARRANTY OF ANY KIND IS EXPRESSED OR IMPLIED.
//     YOU USE IT AT YOUR OWN RISK. THE AUTHOR NOT WILL BE LIABLE FOR DATA LOSS,
//     DAMAGES AND LOSS OF PROFITS OR ANY OTHER KIND OF LOSS WHILE USING OR MISUSING THIS CODE.
//
//
//------------------------------------------------------------------------------------------------
program GetWMI_Info;

{$APPTYPE CONSOLE}

uses
  SysUtils,
  WbemScripting_TLB,
  Variants,
  ActiveX,
  ComObj;
  

  
// O método JoinDomainOrWorkgroup faz sistemas de computador ingressarem em um domínio ou grupo de trabalho. Esse método está disponível somente nas plataformas Windows 2000 e superiores. O método pode retornar os seguintes valores:
// 0 - êxito.
// Outro - para valores inteiros diferentes dos listados acima, consulte a documentação de códigos de erro do Win32.
// Observação: Ao mover um computador de um domínio para um grupo de trabalho, primeiro o computador deverá ser removido do domínio, antes de executar esse método para ingressar no grupo de trabalho. 
// Password e Username devem usar um nível alto de autenticação (no mínimo RPC_C_AUTHN_LEVEL_PKT_PRIVACY) ao se conectar a winmgmt (ou seja, na chamada para obter a interface IWbemServices) ou SetProxyBlanket no IWbemServices ptr. Se forem locais a winmgmt, não haverá nenhum problema, pois o nível de autenticação será equivalente a RPC_C_AUTHN_LEVEL_PKT_PRIVACY e a solicitação do cliente nunca será enviada para winmgmt. 
// Se Password e Username forem null, o provedor não será afetado. 
// Se o provedor determinar que o nível de autenticação é muito baixo e Password ou Username tiverem sido especificados, será retornado WBEM_E_ENCRYPTED_CONNECTION_REQUIRED. 

procedure  Invoke_Win32_ComputerSystem_JoinDomainOrWorkgroup(const WmiPath :string);
const
  WbemUser    ='';
  WbemPassword='';
  WbemComputer='localhost';
var
  FSWbemLocator : ISWbemLocator;
  FWMIService   : ISWbemServices;
  FWbemObject   : ISWbemObject;
  FInParams     : ISWbemObject;
  FOutParams    : ISWbemObject;
  varValue      : OleVariant;
begin
  FSWbemLocator := CoSWbemLocator.Create;
  FWMIService   := FSWbemLocator.ConnectServer(WbemComputer, 'root\CIMV2', WbemUser, WbemPassword, '', '', 0, nil);
  FWbemObject   := FWMIService.Get(WmiPath,0,nil);
  FInParams     := FWbemObject.Methods_.Item('JoinDomainOrWorkgroup',0).InParameters.SpawnInstance_(0);  
  varValue :='''''';
  FInParams.Properties_.Item('AccountOU', 0).Set_Value(varValue);
  varValue :=0;
  FInParams.Properties_.Item('FJoinOptions', 0).Set_Value(varValue);
  varValue :='''''';
  FInParams.Properties_.Item('Name', 0).Set_Value(varValue);
  varValue :='''''';
  FInParams.Properties_.Item('Password', 0).Set_Value(varValue);
  varValue :='''''';
  FInParams.Properties_.Item('UserName', 0).Set_Value(varValue);
  
  FOutParams    := FWMIService.ExecMethod(WmiPath, 'JoinDomainOrWorkgroup', FInParams,0 , nil);
  Writeln(Format('ReturnValue  %s',[FOutParams.Properties_.Item('ReturnValue',0).Get_Value]));
  
end;


begin
 try
    CoInitialize(nil);
    try
      Invoke_Win32_ComputerSystem_JoinDomainOrWorkgroup('');
    finally
      CoUninitialize;
    end;
 except
    on E:EOleException do
        Writeln(Format('EOleException %s %x', [E.Message,E.ErrorCode]));  
    on E:Exception do
        Writeln(E.Classname, ':', E.Message);
 end;
 Writeln('Press Enter to exit');
 Readln;   
end.