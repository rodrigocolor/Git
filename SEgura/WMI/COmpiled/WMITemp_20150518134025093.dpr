//-----------------------------------------------------------------------------------------------------
//     This code was generated by the Wmi Delphi Code Creator http://theroadtodelphi.wordpress.com
//     Version: 1.9.5.0 
//
//
//
//     LIABILITY DISCLAIMER
//     THIS GENERATED CODE IS DISTRIBUTED "AS IS". NO WARRANTY OF ANY KIND IS EXPRESSED OR IMPLIED.
//     YOU USE IT AT YOUR OWN RISK. THE AUTHOR NOT WILL BE LIABLE FOR DATA LOSS,
//     DAMAGES AND LOSS OF PROFITS OR ANY OTHER KIND OF LOSS WHILE USING OR MISUSING THIS CODE.
//
//
//----------------------------------------------------------------------------------------------------
program GetWMI_Info;

{$APPTYPE CONSOLE}

uses
  SysUtils,
  ActiveX,
  ComObj,
  Variants;
  

    
// A classe Win32_OperatingSystem representa um sistema operacional instalado em um sistema de computador Win32. Qualquer sistema operacional que possa ser instalado em um sistema Win32 é um descendente (ou membro) dessa classe.
// Exemplo: Microsoft Windows 95.

procedure  GetWin32_OperatingSystemInfo;
const
  WbemUser            ='';
  WbemPassword        ='';
  WbemComputer        ='localhost';
  wbemFlagForwardOnly = $00000020;
var
  FSWbemLocator : OLEVariant;
  FWMIService   : OLEVariant;
  FWbemObjectSet: OLEVariant;
  FWbemObject   : OLEVariant;
  oEnum         : IEnumvariant;
  iValue        : LongWord;
begin;
  FSWbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
  FWMIService   := FSWbemLocator.ConnectServer(WbemComputer, 'root\CIMV2', WbemUser, WbemPassword);
  FWbemObjectSet:= FWMIService.ExecQuery('SELECT * FROM Win32_OperatingSystem','WQL',wbemFlagForwardOnly);
  oEnum         := IUnknown(FWbemObjectSet._NewEnum) as IEnumVariant;
  while oEnum.Next(1, FWbemObject, iValue) = 0 do
  begin
    Writeln(Format('BootDevice                                   %s',[String(FWbemObject.BootDevice)]));// String
    Writeln(Format('BuildNumber                                  %s',[String(FWbemObject.BuildNumber)]));// String
    Writeln(Format('BuildType                                    %s',[String(FWbemObject.BuildType)]));// String
    Writeln(Format('Caption                                      %s',[String(FWbemObject.Caption)]));// String
    Writeln(Format('CodeSet                                      %s',[String(FWbemObject.CodeSet)]));// String
    Writeln(Format('CountryCode                                  %s',[String(FWbemObject.CountryCode)]));// String
    Writeln(Format('CreationClassName                            %s',[String(FWbemObject.CreationClassName)]));// String
    Writeln(Format('CSCreationClassName                          %s',[String(FWbemObject.CSCreationClassName)]));// String
    Writeln(Format('CSDVersion                                   %s',[String(FWbemObject.CSDVersion)]));// String
    Writeln(Format('CSName                                       %s',[String(FWbemObject.CSName)]));// String
    Writeln(Format('CurrentTimeZone                              %d',[Integer(FWbemObject.CurrentTimeZone)]));// Sint16
    Writeln(Format('DataExecutionPrevention_32BitApplications    %s',[String(FWbemObject.DataExecutionPrevention_32BitApplications)]));// Boolean
    Writeln(Format('DataExecutionPrevention_Available            %s',[String(FWbemObject.DataExecutionPrevention_Available)]));// Boolean
    Writeln(Format('DataExecutionPrevention_Drivers              %s',[String(FWbemObject.DataExecutionPrevention_Drivers)]));// Boolean
    Writeln(Format('DataExecutionPrevention_SupportPolicy        %d',[Integer(FWbemObject.DataExecutionPrevention_SupportPolicy)]));// Uint8
    Writeln(Format('Debug                                        %s',[String(FWbemObject.Debug)]));// Boolean
    Writeln(Format('Description                                  %s',[String(FWbemObject.Description)]));// String
    Writeln(Format('Distributed                                  %s',[String(FWbemObject.Distributed)]));// Boolean
    Writeln(Format('EncryptionLevel                              %d',[Integer(FWbemObject.EncryptionLevel)]));// Uint32
    Writeln(Format('ForegroundApplicationBoost                   %d',[Integer(FWbemObject.ForegroundApplicationBoost)]));// Uint8
    Writeln(Format('FreePhysicalMemory                           %d',[Integer(FWbemObject.FreePhysicalMemory)]));// Uint64
    Writeln(Format('FreeSpaceInPagingFiles                       %d',[Integer(FWbemObject.FreeSpaceInPagingFiles)]));// Uint64
    Writeln(Format('FreeVirtualMemory                            %d',[Integer(FWbemObject.FreeVirtualMemory)]));// Uint64
    Writeln(Format('InstallDate                                  %s',[String(FWbemObject.InstallDate)]));// Datetime
    Writeln(Format('LargeSystemCache                             %d',[Integer(FWbemObject.LargeSystemCache)]));// Uint32
    Writeln(Format('LastBootUpTime                               %s',[String(FWbemObject.LastBootUpTime)]));// Datetime
    Writeln(Format('LocalDateTime                                %s',[String(FWbemObject.LocalDateTime)]));// Datetime
    Writeln(Format('Locale                                       %s',[String(FWbemObject.Locale)]));// String
    Writeln(Format('Manufacturer                                 %s',[String(FWbemObject.Manufacturer)]));// String
    Writeln(Format('MaxNumberOfProcesses                         %d',[Integer(FWbemObject.MaxNumberOfProcesses)]));// Uint32
    Writeln(Format('MaxProcessMemorySize                         %d',[Integer(FWbemObject.MaxProcessMemorySize)]));// Uint64
    Writeln(Format('MUILanguages                                 %s',[String(FWbemObject.MUILanguages)]));// Array of String
    Writeln(Format('Name                                         %s',[String(FWbemObject.Name)]));// String
    Writeln(Format('NumberOfLicensedUsers                        %d',[Integer(FWbemObject.NumberOfLicensedUsers)]));// Uint32
    Writeln(Format('NumberOfProcesses                            %d',[Integer(FWbemObject.NumberOfProcesses)]));// Uint32
    Writeln(Format('NumberOfUsers                                %d',[Integer(FWbemObject.NumberOfUsers)]));// Uint32
    Writeln(Format('OperatingSystemSKU                           %d',[Integer(FWbemObject.OperatingSystemSKU)]));// Uint32
    Writeln(Format('Organization                                 %s',[String(FWbemObject.Organization)]));// String
    Writeln(Format('OSArchitecture                               %s',[String(FWbemObject.OSArchitecture)]));// String
    Writeln(Format('OSLanguage                                   %d',[Integer(FWbemObject.OSLanguage)]));// Uint32
    Writeln(Format('OSProductSuite                               %d',[Integer(FWbemObject.OSProductSuite)]));// Uint32
    Writeln(Format('OSType                                       %d',[Integer(FWbemObject.OSType)]));// Uint16
    Writeln(Format('OtherTypeDescription                         %s',[String(FWbemObject.OtherTypeDescription)]));// String
    Writeln(Format('PAEEnabled                                   %s',[String(FWbemObject.PAEEnabled)]));// Boolean
    Writeln(Format('PlusProductID                                %s',[String(FWbemObject.PlusProductID)]));// String
    Writeln(Format('PlusVersionNumber                            %s',[String(FWbemObject.PlusVersionNumber)]));// String
    Writeln(Format('PortableOperatingSystem                      %s',[String(FWbemObject.PortableOperatingSystem)]));// Boolean
    Writeln(Format('Primary                                      %s',[String(FWbemObject.Primary)]));// Boolean
    Writeln(Format('ProductType                                  %d',[Integer(FWbemObject.ProductType)]));// Uint32
    Writeln(Format('RegisteredUser                               %s',[String(FWbemObject.RegisteredUser)]));// String
    Writeln(Format('SerialNumber                                 %s',[String(FWbemObject.SerialNumber)]));// String
    Writeln(Format('ServicePackMajorVersion                      %d',[Integer(FWbemObject.ServicePackMajorVersion)]));// Uint16
    Writeln(Format('ServicePackMinorVersion                      %d',[Integer(FWbemObject.ServicePackMinorVersion)]));// Uint16
    Writeln(Format('SizeStoredInPagingFiles                      %d',[Integer(FWbemObject.SizeStoredInPagingFiles)]));// Uint64
    Writeln(Format('Status                                       %s',[String(FWbemObject.Status)]));// String
    Writeln(Format('SuiteMask                                    %d',[Integer(FWbemObject.SuiteMask)]));// Uint32
    Writeln(Format('SystemDevice                                 %s',[String(FWbemObject.SystemDevice)]));// String
    Writeln(Format('SystemDirectory                              %s',[String(FWbemObject.SystemDirectory)]));// String
    Writeln(Format('SystemDrive                                  %s',[String(FWbemObject.SystemDrive)]));// String
    Writeln(Format('TotalSwapSpaceSize                           %d',[Integer(FWbemObject.TotalSwapSpaceSize)]));// Uint64
    Writeln(Format('TotalVirtualMemorySize                       %d',[Integer(FWbemObject.TotalVirtualMemorySize)]));// Uint64
    Writeln(Format('TotalVisibleMemorySize                       %d',[Integer(FWbemObject.TotalVisibleMemorySize)]));// Uint64
    Writeln(Format('Version                                      %s',[String(FWbemObject.Version)]));// String
    Writeln(Format('WindowsDirectory                             %s',[String(FWbemObject.WindowsDirectory)]));// String
	    
    Writeln('');
    FWbemObject:=Unassigned;
  end;
end;


begin
 try
    CoInitialize(nil);
    try
      GetWin32_OperatingSystemInfo;
    finally
      CoUninitialize;
    end;
 except
    on E:EOleException do
        Writeln(Format('EOleException %s %x', [E.Message,E.ErrorCode])); 
    on E:Exception do
        Writeln(E.Classname, ':', E.Message);
 end;
 Writeln('Press Enter to exit');
 Readln;      
end.